class Solution {
public:
    int operate(int &a,int &b, const string &token)
    {
        if(token == "+")
            return a+b;

        if(token == "-")
            return a-b;

        if(token == "*")
            return (long)a * (long)b;

        if(token == "/")
            return a/b;

        return -1;
    }

    int evalRPN(vector<string>& tokens) {
        stack<int>st;
        int result = 0;

        //we can also add this map instead of writing the operate function above
        unordered_map<string, function<int (int, int)> >mp = {
            {"+", [](int a, int b) { return a + b; } },
            {"-", [](int a, int b) { return a - b; } },
            {"*", [](int a, int b) { return (long)a * (long)b; } },
            {"/", [](int a, int b) { return a / b; } },
        };

        for(const string &token : tokens)
        {
            if(token == "+" || token == "-" || token == "*" || token == "/")
            {
                int b = st.top();
                st.pop();

                int a = st.top();
                st.pop();

                result = mp[token](a,b);
                st.push(result);
            }
            else
            {
                st.push(stoi(token));
            }
        }

        return st.top();
    }
};
