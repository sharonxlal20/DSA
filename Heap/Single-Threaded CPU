class Solution {
public:
    vector<int> getOrder(vector<vector<int>>& tasks) {
        int n = tasks.size();

        vector<array<int, 3>>sortedTasks; //vector to store 1. enque time 2. processing time & 3. index
        for(int i=0; i<n; i++)
        {
            int startTime = tasks[i][0];
            int processingTime = tasks[i][1];

            sortedTasks.push_back({startTime, processingTime, i});
        }

        sort(begin(sortedTasks), end(sortedTasks)); //sort the vector -> O(n * logn)

        vector<int>result;

        long long currTime = 0;
        int idx = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<> >pq; //min heap

        while(idx < n || !pq.empty()) // O(n * logn)
        {
            if(pq.empty() && currTime < sortedTasks[idx][0])
            {
                currTime = sortedTasks[idx][0];
            }

            while(idx < n && sortedTasks[idx][0] <= currTime)
            {
                pq.push({sortedTasks[idx][1], sortedTasks[idx][2]});
                idx++;
            }

            pair<int, int>currTask = pq.top();
            pq.pop();

            currTime += currTask.first;
            result.push_back(currTask.second);
        }

        return result;
    }
};
