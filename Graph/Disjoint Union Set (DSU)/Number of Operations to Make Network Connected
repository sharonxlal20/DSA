class Solution {
public:
    vector<int>parent;
    vector<int>rank;

    int find(int x)
    {
        if(parent[x]==x)
        return x;

        return parent[x]=find(parent[x]);
    }

    void Union(int x,int y)
    {
        int x_parent=find(x);
        int y_parent=find(y);

        if(x_parent == y_parent)
        return;

        if(rank[x_parent] > rank[y_parent])
        {
            parent[y_parent]=x_parent;
        }
        else if(rank[y_parent] > rank[x_parent])
        {
            parent[x_parent]=y_parent;
        }
        else
        {
            parent[x_parent]=y_parent;
        }
    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        parent.resize(n);
        rank.resize(n,0);

        for(int i=0;i<n;i++)
        {
            parent[i]=i;
        }

        int edges=connections.size();

        if(edges < n-1)
        return -1;

        int components=n;

        for(auto &vec:connections)
        {
            int first=vec[0];
            int second=vec[1];

            int first_parent=find(first);
            int second_parent=find(second);

            if(first_parent != second_parent)
            {
                Union(first,second);
                components--;
            }
        }

        return components-1;
    }
};
