class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int,vector<pair<int,int>>>adj;

        for(auto &vec : times)
        {
            int u=vec[0];
            int v=vec[1];
            int w=vec[2];

            adj[u].push_back({v,w});
        }

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;

        vector<int>result(n+1,INT_MAX);

        result[k]=0;
        pq.push({0,k});

        while(!pq.empty())
        {
            int dist=pq.top().first;
            int node=pq.top().second;

            pq.pop();

            for(auto &vec:adj[node])
            {
                int dis1=vec.second;
                int adjNode=vec.first;

                if(dist+dis1 < result[adjNode])
                {
                    result[adjNode]=dist+dis1;
                    pq.push({dist+dis1,adjNode});
                }
            }
        }

        int ans=INT_MIN;

        for(int i=1;i<=n;i++)
        {
            ans=max(ans,result[i]);
        }

        if(ans == INT_MAX)
        return -1;
        else
        return ans;
    }
};
