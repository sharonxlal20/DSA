class Solution {
public:
    typedef pair<int,pair<int,int>>P;
    vector<vector<int>>directions{{-1,0}, {1,0}, {0,1}, {0,-1}, {-1,-1}, {-1,1}, {1,-1}, {1,1}};

    int solvedUsingBFS(vector<vector<int>>&grid) //BFS Code
    {
        int m=grid.size();
        int n=grid[0].size();

        if(m == 0 || n==0 || grid[0][0]!=0)
            return -1;

        auto isSafe = [&](int x,int y){
            return x>=0 && x<m && y>=0 && y<n;
        };

        queue<pair<int,int>>q;
        grid[0][0]=1;
        q.push({0,0});

        int level=0;

        while(!q.empty())
        {
            int N=q.size();
            while(N--)
            {
                int x=q.front().first;
                int y=q.front().second;

                q.pop();

                if(x==m-1 && y==n-1)
                    return level+1;

                for(auto &dir: directions)
                {
                    int new_x=x+dir[0];
                    int new_y=y+dir[1];

                    if(isSafe(new_x,new_y) && grid[new_x][new_y]==0)
                    {
                        q.push({new_x,new_y});
                        grid[new_x][new_y]=1;
                    }
                }
            }

            level++;
        }
        return -1;
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        // int x=solvedUsingBFS(grid);
        // return x;

        int m=grid.size(); //solved using Dijkstra's Algo
        int n=grid[0].size();

        if(m==0 || n==0 || grid[0][0]!=0)
        {
            return -1;
        }

        auto isSafe = [&](int x,int y)
        {
            return x>=0 && x<m && y>=0 && y<n;
        };

        vector<vector<int>>result(m,vector<int>(n,INT_MAX));

        priority_queue<P,vector<P>,greater<P>>pq;

        pq.push({0,{0,0}});
        result[0][0]=0;

        while(!pq.empty())
        {
            int d=pq.top().first;
            pair<int,int>node=pq.top().second;

            int x=node.first;
            int y=node.second;

            pq.pop();

            for(auto &dir:directions)
            {
                int new_x=x+dir[0];
                int new_y=y+dir[1];

                int dist=1;

                if(isSafe(new_x,new_y) && grid[new_x][new_y]==0 && d+dist < result[new_x][new_y])
                {
                    pq.push({d+dist,{new_x,new_y}});
                    result[new_x][new_y]=d+dist;
                }  
            }
        }

        if(result[m-1][n-1] == INT_MAX)
        return -1;

        return result[m-1][n-1]+1;
    }
};
