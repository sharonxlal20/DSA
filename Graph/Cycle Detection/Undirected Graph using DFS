class Solution {
  public:
  bool isCycleDFS(vector<vector<int>>&adj,int node,vector<int>&visited,int parent) //through DFS
    {
        visited[node]=1;
        
        for(int &v:adj[node])
        {
            if(v==parent)
            continue;
            
            if(visited[v])
            return true;
            
            if(isCycleDFS(adj,v,visited,node))
            return true;
        }
        
        return false;
    }
    
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        int v=adj.size();
        
        vector<int>visited(v,0);
        
        for(int i=0;i<v;i++) //this loop basically serves the purpose of disconnected components in a graph
        {
            if(!visited[i] && isCycleDFS(adj,i,visited,-1))
            {
                return true;
            }
        }
        
        return false;
    }
};
