class Solution {
  public:
  bool isCycleBFS(vector<vector<int>>&adj,int node,vector<int>&visited) //through BFS
    {
        queue<pair<int,int>>q;
        
        q.push({node,-1});
        visited[node]=1;
        
        while(!q.empty())
        {
            int source=q.front().first;
            int parent=q.front().second;
            
            q.pop();
            
            for(int &v:adj[source])
            {
                if(!visited[v])
                {
                    visited[v]=true;
                    q.push({v,source});
                }
                else if(v!=parent) //obv agar parent hoga toh cycle ni hai aur agar parent ni hai toh it's a cycle
                {
                    return true;
                }
            }
        }
        return false;
    }
 bool isCycle(vector<vector<int>>& adj) {
        int v=adj.size();
        
        vector<int>visited(v,0);
        
        for(int i=0;i<v;i++) //this loop basically serves the purpose of disconnected components in a graph
        {
            if(!visited[i] && isCycleBFS(adj,i,visited,-1))
            {
                return true;
            }
        }
        
        return false;
    }
};
