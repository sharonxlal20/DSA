class Solution {
  public:
    vector<int>parent;
    vector<int>rank;

    int find(int x)
    {
        if(parent[x] == x)
            return x;
            
        return parent[x]=find(parent[x]);
    }
    
    void Union(int x,int y)
    {
        int parent_x = find(x);
        int parent_y = find(y);
        
        if(parent_x == parent_y)
        {
            return;
        }
        
        if(rank[parent_x] > rank[parent_y])
        {
            parent[parent_y] = parent_x;
        }
        
        else if(rank[parent_x] < rank[parent_y])
        {
            parent[parent_x] = parent_y;
        }
        
        else
        {
            parent[parent_x] = parent_y;
            rank[parent_y]++;
        }
    }
    
    
    int kruskalAlgo(vector<vector<int>> vec) //Using DSU for Kruskal's Algorithm
    {
        int sum = 0;
        
        for(auto &temp : vec)
        {
            int u=temp[0];
            int v=temp[1];
            int wt=temp[2];
            
            int parent_u = find(u);
            int parent_v = find(v);
            
            if(parent_u != parent_v)
            {
                Union(u,v);
                sum+=wt;
            }
        }
        
        return sum;
    }
    
    int spanningTree(int V, vector<vector<int>> adj[]) {
        parent.resize(V);
        rank.resize(V,0);
        
        for(int i=0;i<V;i++)
        {
            parent[i]=i;
        }
        
        vector<vector<int>>vec;
        
        for(int u=0; u<V; u++)
        {
            for(auto &temp : adj[u])
            {
                int v=temp[0];
                int wt=temp[1];
                
                vec.push_back({u,v,wt});
            }
        }
        
        auto comparator = [&](vector<int>& vec1, vector<int>& vec2){
            return vec1[2] < vec2[2];
        };
        
        sort(begin(vec), end(vec), comparator);
        
        return kruskalAlgo(vec);
    }
};
