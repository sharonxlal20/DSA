class Solution {
public:
    vector<int>parent;
    vector<int>rank;
    typedef pair<int,int>P;

    int primsAlgo(vector<vector<P>>& adj,int V) //using prims algorithm
    {
        priority_queue<P,vector<P>,greater<P>>pq;
        
        vector<bool>inMST(V,false);
        
        int sum=0;
        
        pq.push({0,0});
        
        while(!pq.empty())
        {
            auto p=pq.top();
            pq.pop();
            
            int wt=p.first;
            int node=p.second;
            
            if(inMST[node] == true)
                continue;
                
            inMST[node]=true;
            sum+=wt;
            
            for(auto &tmp : adj[node])
            {
                int neighbour = tmp.first;
                int neighbour_wt = tmp.second;
                
                if(inMST[neighbour] == false)
                {
                    pq.push({neighbour_wt,neighbour});
                }
            }
        }
        
        return sum;
    }

    int find(int x)
    {
        if(parent[x] == x)
        return x;

        return parent[x]=find(parent[x]);
    }

    void Union(int x,int y)
    {
        int parent_x=find(x);
        int parent_y=find(y);

        if(parent_x == parent_y)
            return;

        if(rank[parent_x] > rank[parent_y])
        {
            parent[parent_y] = parent_x;
        }
        else if(rank[parent_y] > rank[parent_x])
        {
            parent[parent_x] = parent_y;
        }
        else
        {
            parent[parent_x] = parent_y;
            rank[parent_y]++;
        }

    }

    int kruskalAlgo(vector<vector<int>>&vec) //Using DSU for Kruskal's Algorithm
    {
        int sum = 0;
        
        for(auto &temp : vec)
        {
            int u=temp[0];
            int v=temp[1];
            int wt=temp[2];
            
            int parent_u = find(u);
            int parent_v = find(v);
            
            if(parent_u != parent_v)
            {
                Union(u,v);
                sum+=wt;
            }
        }
        
        return sum;
    }
    
    int minCostConnectPoints(vector<vector<int>>& points) {
        int V=points.size();

        parent.resize(V);
        rank.resize(V,0);

        for(int i=0;i<V;i++)
        {
            parent[i]=i;
        }

        //vector<vector<P>>adj(V);
        vector<vector<int>>adj;

        for(int i=0; i<V; i++)
        {
            for(int j=i+1; j<V; j++)
            {
                int x1=points[i][0];
                int y1=points[i][1];

                int x2=points[j][0];
                int y2=points[j][1];

                int d=abs(x1-x2)+abs(y1-y2);

                // adj[i].push_back({j,d});
                // adj[j].push_back({i,d});

                adj.push_back({i,j,d});
            }
        }
        //return primsAlgo(adj,V);

        auto comparator = [&](vector<int>&vec1,vector<int>&vec2){
            return vec1[2] < vec2[2];
        };

        sort(begin(adj),end(adj),comparator);

        return kruskalAlgo(adj);
    }
};
