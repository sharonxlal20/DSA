class Solution
{
    public:
    
    vector<int>parent;
    vector<int>rank;
    
    int find(int x)
    {
        if(parent[x]==x)
        {
            return x;
        }
        
        return parent[x]=find(parent[x]);
    }
    
    void Union(int x,int y)
    {
        int x_parent=find(x);
        int y_parent=find(y);
        
        // if(x_parent==y_parent)
        // return;
        
        if(rank[x_parent] > rank[y_parent])
        {
            parent[y_parent]=x_parent;
        }
        
        else if(rank[x_parent] < rank[y_parent])
        {
            parent[x_parent]=y_parent;
        }
        
        else
        {
            parent[x_parent]=y_parent; //can do vice versa as well i.e. parent[y_parent]=x_parent
            rank[y_parent]++;
        }
    }
    //Function to detect cycle using DSU in an undirected graph.
	int detectCycle(int V, vector<int>adj[])
	{
	    parent.resize(V);
	    rank.resize(V,0);
	    
	    for(int i=0;i<V;i++)
	    {
	        parent[i]=i;
	    }
	    
	    for(int u=0; u<V; u++)
	    {
	        for(auto &v:adj[u])
	        {
	            if(u<v)
	            {
	                int u_parent=find(u);
	                int v_parent=find(v);
	                
	                if(u_parent == v_parent)
	                return 1;
	                
	                Union(u,v);
	            }
	        }
	    }
	    
	    return 0;
	}
};
